---
swagger: "2.0"
info:
  description: "Register, List, Manage Remote Agents and Devices."
  version: "3.1.1-SNAPSHOT"
  title: "Agents and Devices"
host: "api.im.actiandatacloud.com"
schemes:
- "https"
paths:
  /agents:
    get:
      summary: "Get a List of agents"
      description: ""
      operationId: "listAgents"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Page number (zero based)"
        required: false
        schema:
          type: "string"
      - in: "body"
        name: "body"
        description: "Page size"
        required: false
        schema:
          type: "string"
      - in: "body"
        name: "body"
        description: "Sort by column name"
        required: false
        schema:
          type: "string"
      - in: "body"
        name: "body"
        description: "Sort direction (asc or desc)"
        required: false
        schema:
          type: "string"
      - in: "body"
        name: "body"
        description: "Filter (agent name)"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AgentListResponse"
        404:
          description: "Not Found"
    post:
      summary: "Register an agent"
      description: ""
      operationId: "registerAgent"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AgentRequest"
      responses:
        200:
          description: "Registered"
          schema:
            $ref: "#/definitions/AgentResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /agents/blacklist/{hostname}:
    post:
      summary: "Blacklist a hostname from being used as an agent"
      description: ""
      operationId: "blacklistHostname"
      parameters:
      - name: "hostname"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
  /agents/{id}:
    get:
      summary: "Retrieve an agent"
      description: ""
      operationId: "getAgent"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AgentResponse"
        404:
          description: "Not Found"
    delete:
      summary: "Deregister an agent"
      description: ""
      operationId: "deregisterAgent"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        204:
          description: "Deregistered"
        404:
          description: "Not Found"
    patch:
      summary: "Send control message to agent"
      description: ""
      operationId: "sendControlMessage"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      - name: "upgradeType"
        in: "query"
        required: true
        type: "string"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        404:
          description: "Not Found"
  /agents/{id}/deactivate:
    post:
      summary: "Deactivate an agent"
      description: ""
      operationId: "deactivateAgent"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Not Found"
  /agents/{id}/destination:
    delete:
      summary: "Remove an agent destination connection"
      description: ""
      operationId: "removeDestination"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
  /agents/{id}/destination/{destinationId}:
    post:
      summary: "Enable an agent to connect to a specific destination"
      description: ""
      operationId: "setDestination"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      - name: "destinationId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
  /agents/{id}/healthcode:
    get:
      summary: "Get agent health"
      description: ""
      operationId: "agentHealth"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
        404:
          description: "Not Found"
  /agents/{id}/license/default:
    get:
      summary: "Retrieve license used for this agent"
      description: ""
      operationId: "getAgentLicenseInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LicenseInfoResponse"
  /agents/{id}/log:
    get:
      summary: "Retrieve an agent log file"
      description: ""
      operationId: "getAgentLog"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /agents/{id}/owner:
    put:
      summary: "Assign a new owner to this agent"
      description: ""
      operationId: "changeOwner"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/AgentResponse"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        401:
          description: "unauthorized"
  /agents/{id}/reactivate:
    post:
      summary: "Reactivate an agent"
      description: ""
      operationId: "reactivateAgent"
      parameters:
      - name: "id"
        in: "path"
        description: "Agent hostname"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Not Found"
definitions:
  AgentListResponse:
    type: "object"
    properties:
      totalRecords:
        type: "integer"
        format: "int64"
      totalPages:
        type: "integer"
        format: "int32"
      size:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      sortBy:
        type: "string"
      direction:
        type: "string"
      filter:
        type: "string"
      items:
        type: "array"
        items:
          $ref: "#/definitions/AgentResponse"
  AgentRequest:
    type: "object"
    properties:
      hostname:
        type: "string"
      ipAddress:
        type: "string"
      version:
        type: "string"
      os:
        type: "string"
      worker:
        type: "string"
      engine:
        type: "string"
      dataflow:
        type: "string"
      destinationId:
        type: "string"
  AgentResponse:
    type: "object"
    properties:
      deviceId:
        type: "string"
      id:
        type: "string"
      userCode:
        type: "string"
      deviceCode:
        type: "string"
      clientId:
        type: "string"
      clientSecret:
        type: "string"
      active:
        type: "boolean"
      name:
        type: "string"
      hostname:
        type: "string"
      os:
        type: "string"
      ipAddress:
        type: "string"
      version:
        type: "string"
      worker:
        type: "string"
      engine:
        type: "string"
      dataflow:
        type: "string"
      registrationTime:
        type: "integer"
        format: "int64"
      lastCheckedIn:
        type: "integer"
        format: "int64"
      healthCode:
        type: "integer"
        format: "int32"
      useSsl:
        type: "boolean"
      amqpHost:
        type: "string"
      amqpPort:
        type: "string"
      amqpUser:
        type: "string"
      amqpKey:
        type: "string"
      authorizationServer:
        type: "string"
      controlServer:
        type: "string"
      ownerId:
        type: "string"
      owner:
        $ref: "#/definitions/Reference"
      isDestinationEligible:
        type: "boolean"
      destinationId:
        type: "string"
      destination:
        $ref: "#/definitions/Reference"
  ApiErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
  FeatureResponse:
    type: "object"
    properties:
      featureCode:
        type: "string"
      expiration:
        type: "string"
  LicenseInfoResponse:
    type: "object"
    properties:
      licenseId:
        type: "string"
      licenseFile:
        type: "string"
      licenseSignatureType:
        type: "string"
      licenseStatus:
        type: "string"
      features:
        type: "array"
        items:
          $ref: "#/definitions/FeatureResponse"
  Reference:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      href:
        type: "string"
